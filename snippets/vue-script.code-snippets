{
  "Vue Data": {
    "prefix": "vdata",
    "body": [
      "data() {",
      "\treturn {",
      "\t\t${1:key}: ${2:value}",
      "\t}",
      "},"
    ],
    "description": "Vue Component Data"
  },
  "Vue Methods": {
    "prefix": "vmethod",
    "body": [
      "methods: {",
      "\t${1:name}() {",
      "\t\t${0}",
      "\t}",
      "},"
    ],
    "description": "vue method"
  },
  "Vue Computed": {
    "prefix": "vcomputed",
    "body": [
      "computed: {",
      "\t${1:name}() {",
      "\t\treturn this.${2:data} ${0}",
      "\t}",
      "},"
    ],
    "description": "computed value"
  },
  "Vue Lifecycle beforeCreate": {
    "prefix": "vbeforecreate",
    "body": [
      "beforeCreate () {",
      "\t${0};",
      "},"
    ],
    "description": "beforeCreate lifecycle method"
  },
  "Vue Lifecycle created": {
    "prefix": "vcreated",
    "body": [
      "created () {",
      "\t${0};",
      "},"
    ],
    "description": "created lifecycle method"
  },
  "Vue Lifecycle beforeMount": {
    "prefix": "vbeforemount",
    "body": [
      "beforeMount () {",
      "\t${0};",
      "},"
    ],
    "description": "beforeMount lifecycle method"
  },
  "Vue Lifecycle mounted": {
    "prefix": "vmounted",
    "body": [
      "mounted () {",
      "\t${0};",
      "},"
    ],
    "description": "mounted lifecycle method"
  },
  "Vue Lifecycle beforeUpdate": {
    "prefix": "vbeforeupdate",
    "body": [
      "beforeUpdate () {",
      "\t${0};",
      "},"
    ],
    "description": "beforeUpdate lifecycle method"
  },
  "Vue Lifecycle updated": {
    "prefix": "vupdated",
    "body": [
      "updated () {",
      "\t${0};",
      "},"
    ],
    "description": "updated lifecycle method"
  },
  "Vue Lifecycle beforeDestroy": {
    "prefix": "vbeforedestroy",
    "body": [
      "beforeDestroy () {",
      "\t${0};",
      "},"
    ],
    "description": "beforeDestroy lifecycle method (Vue 2 hook deprecated, please use v3onbeforeunmount for Vue 3)"
  },
  "Vue Lifecycle destroyed": {
    "prefix": "vdestroyed",
    "body": [
      "destroyed () {",
      "\t${0};",
      "},"
    ],
    "description": "destroyed lifecycle method (Vue 2 hook deprecated, please use v3onunmounted for Vue 3)"
  },
  "Vue Watchers": {
    "prefix": "vwatcher",
    "body": [
      "watch: {",
      "\t${1:data}(${2:newValue}, ${3:oldValue}) {",
      "\t\t${0}",
      "\t}",
      "},"
    ],
    "description": "vue watcher"
  },
  "Vue Watchers with Options": {
    "prefix": "vwatcher-options",
    "body": [
      "watch: {",
      "\t${1:data}: {",
      "\t\timmediate: ${2:true},",
      "\t\tdeep: ${3:true},",
      "\t\thandler(${4:newValue}, ${5:oldValue}) {",
      "\t\t\t${0}",
      "\t\t}",
      "\t}",
      "},"
    ],
    "description": "vue watcher with options"
  },
  "Vue Props with Default": {
    "prefix": "vprops",
    "body": [
      "props: {",
      "\t${1:propName}: {",
      "\t\ttype: ${2:Number},",
      "\t\tdefault: ${0}",
      "\t},",
      "},"
    ],
    "description": "Vue Props with Default"
  },
  "Vue Import File": {
    "prefix": "vimport",
    "body": [
      "import ${1:New} from '@/components/${1:New}.vue';"
    ],
    "description": "Import one component into another"
  },
  "Vue Import into the Component": {
    "prefix": "vcomponents",
    "body": [
      "components: {",
      "\t${1:New},",
      "},"
    ],
    "description": "Import one component into another, within export statement"
  },
  "Vue Import Export": {
    "prefix": "vimport-export",
    "body": [
      "import ${1:Name} from '@/components/${1:Name}.vue';",
      "",
      "export default {",
      "\tcomponents: {",
      "\t\t${1:Name}",
      "\t},",
      "};"
    ],
    "description": "import a component and include it in export default"
  },
  "Vue Import Component Dynamically": {
    "prefix": "vimport-dynamic",
    "body": [
      "${1:New} = () => import('@/components/${1:New}.vue')"
    ],
    "description": "Import component that should be lazy loaded"
  },




  "Vue Filter": {
    "prefix": "vfilter",
    "body": [
      "filters: {",
      "\t${1:fnName}: function(${2:value}) {",
      "\t\treturn ${2:value}${0};",
      "\t}",
      "}"
    ],
    "description": "vue filter"
  },
  "Vue Mixin": {
    "prefix": "vmixin",
    "body": [
      "const ${1:mixinName} = {",
      "\tmounted() {",
      "\t\tconsole.log('hello from mixin!');",
      "\t},",
      "};"
    ],
    "description": "vue mixin"
  },
  "Vue Use Mixin": {
    "prefix": "vmixin-use",
    "body": [
      "mixins: [${1:mixinName}],"
    ],
    "description": "vue use mixin"
  },
  "Vue Custom Directive": {
    "prefix": "vc-direct",
    "body": [
      "Vue.directive('${1:directiveName}', {",
      "\tbind(el, binding, vnode) {",
      "\t\tel.style.${2:arg} = binding.value.${2:arg};",
      "\t}",
      "});"
    ],
    "description": "vue custom directive"
  },
  "Vue Import Library": {
    "prefix": "vimport-lib",
    "body": [
      "import { ${1:libName} } from '${1:libName}';"
    ],
    "description": "import a library"
  },
  "Vue Import GSAP": {
    "prefix": "vimport-gsap",
    "body": [
      "import gsap from 'gsap';"
    ],
    "description": "import gsap library"
  },
  "Vue Transition Methods with JavaScript Hooks": {
    "prefix": "vanimhook-js",
    "body": [
      "beforeEnter(el) {",
      "\tconsole.log('beforeEnter');",
      "},",
      "enter(el, done) {",
      "\tconsole.log('enter');",
      "\tdone();",
      "},",
      "beforeLeave(el) {",
      "\tconsole.log('beforeLeave');",
      "},",
      "leave(el, done) {",
      "\tconsole.log('leave');",
      "\tdone();",
      "},"
    ],
    "description": "transition component js hooks"
  },


  "Unit Test": {
    "prefix": "vtest",
    "body": [
      "import Vue from 'vue';",
      "import ${1:HelloWorld} from './components/${1:HelloWorld}';",
      "",
      "describe('${1:HelloWorld}.vue', () => {",
      "\tit('${2:should render correct contents}', () => {",
      "\t\tconst Constructor = Vue.extend(${1:HelloWorld});",
      "\t\tconst vm = new Constructor().$mount();",
      "\t\texpect(vm.$el.querySelector('.hello h1').textContent)",
      "\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'});",
      "\t});",
      "});"
    ],
    "description": "unit test component"
  },
  "Vue.config.js Import": {
    "prefix": "vconfig",
    "body": [
      "module.exports = {",
      "\tcss: {",
      "\t\tloaderOptions: {",
      "\t\t\t${1:sass}: {",
      "\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "vue.config.js"
  },
  "Vue Composition API - Reactive": {
    "prefix": "v3reactive",
    "body": [
      "const ${1:name} = reactive({",
      "\t${2:count}: ${3:0}",
      "})"
    ],
    "description": "Vue Composition api - reactive"
  },
  "Vue Composition API - Computed": {
    "prefix": "v3computed",
    "body": [
      "const ${1:name} = computed(() => {",
      "\treturn ${2}",
      "})"
    ],
    "description": "Vue Composition api - computed"
  },
  "Vue Composition API - watch - single source": {
    "prefix": "v3watch",
    "body": [
      "watch(() => ${1:foo}, (newValue, oldValue) => {",
      "\t${2}",
      "})"
    ],
    "description": "Vue Composition api - watcher single source"
  },
  "Vue Composition API - watch - array": {
    "prefix": "v3watch-array",
    "body": [
      "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {",
      "\t${3}",
      "})"
    ],
    "description": "Vue Composition api - watch as array"
  },
  "Vue Composition API - watchEffect": {
    "prefix": "v3watcheffect",
    "body": [
      "watchEffect(() => {",
      "\t${1}",
      "})"
    ],
    "description": "Vue Composition api - watchEffect"
  },
  "Vue Composition API - Vue ref": {
    "prefix": "v3ref",
    "body": [
      "const ${1:name} = ref(${2:initialValue})"
    ],
    "description": "Vue Ref"
  },
  "Vue Lifecycle Hooks - onMounted": {
    "prefix": "v3onmounted",
    "body": [
      "onMounted(() => {${1}})"
    ],
    "description": "Vue Mounted Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onBeforeMount": {
    "prefix": "v3onbeforemount",
    "body": [
      "onBeforeMount(() => {${1}})"
    ],
    "description": "Vue onBeforeMount Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onBeforeUpdate": {
    "prefix": "v3onbeforeupdate",
    "body": [
      "onBeforeUpdate(() => {${1}})"
    ],
    "description": "Vue onBeforeUpdate Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onUpdated": {
    "prefix": "v3onupdated",
    "body": [
      "onUpdated(() => {${1}})"
    ],
    "description": "Vue onUpdated Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onErrorCaptured": {
    "prefix": "v3onerrorcaptured",
    "body": [
      "onErrorCaptured(() => {${1}})"
    ],
    "description": "Vue onErrorCaptured Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onUnmounted": {
    "prefix": "v3onunmounted",
    "body": [
      "onUnmounted(() => {${1}})"
    ],
    "description": "(destroyed) Vue onUnmounted Lifecycle hook"
  },
  "Vue Lifecycle Hooks - onBeforeUnmount": {
    "prefix": "v3onbeforeunmount",
    "body": [
      "onBeforeUnmount(() => {${1}})"
    ],
    "description": "(beforeDestroy) Vue onBeforeUnmount Lifecycle hook"
  },
  "Plugin import": {
    "prefix": "vplugin",
    "body": [
      "import Vue from 'vue'",
      "import ${1:VueCompositionApi} from '${2:@vue/composition-api}'",
      "",
      "Vue.use(${1:VueCompositionApi})"
    ],
    "description": "Import a plugin to main.js or plugins file"
  },
  "Vue Composition API Reactive Script": {
    "prefix": "v3reactive-setup",
    "body": [
      "import { reactive, toRefs } from 'vue'",
      "",
      "export default {",
      "\tsetup () {",
      "\t\tconst state = reactive({",
      "\t\t\t${0:count}: ${1:0},",
      "\t\t})",
      "\t",
      "\t\treturn {",
      "\t\t\t...toRefs(state),",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Vue Composition API Script with Reactive"
  },
  "Use Composition API within Options API": {
    "prefix": "v3useinoptions",
    "body": [
      "import { ${0:component} } from '@/composables/${0:component}.js'",
      "",
      "export default {",
      "\tsetup () {",
      "\t\tconst { ${1:name} } = ${0:component}()",
      "\t",
      "\t\treturn {",
      "\t\t\t${1:name}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Use Composition API within Options API"
  },
  "Vue Composition API - defineProps": {
    "prefix": "vdefineprops",
    "body": [
      "const props = defineProps({",
      "\t${1:name}: ${2:type}",
      "})"
    ],
    "description": "defineProps with type inference"
  },
  "Vue Composition API - defineEmits": {
    "prefix": "vdefineemits",
    "body": [
      "const emit = defineEmits(['${1:eventName}'])"
    ],
    "description": "defineEmits"
  },
  "Vue Composition API - defineExpose": {
    "prefix": "vdefineexpose",
    "body": [
      "defineExpose({",
      "\t${1:name}",
      "})"
    ],
    "description": "defineExpose"
  },
  "Vue Composition API - defineModel": {
    "prefix": "vdefinemodel",
    "body": [
      "const ${1:modelName} = defineModel()"
    ],
    "description": "defineModel for v-model (Vue 3.4+)"
  },
  "Vue Composition API - useRef": {
    "prefix": "vuseref",
    "body": [
      "const ${1:name} = ref(${2:initialValue})"
    ],
    "description": "const foo = ref() quick declaration"
  },
  "Vue Composition API - useTemplateRef": {
    "prefix": "vusetemplateref",
    "body": [
      "const ${1:name} = useTemplateRef('${2:template-ref}')"
    ],
    "description": "const foo = useTemplateRef() quick declaration (Vue 3.5+)"
  },
  "Vue Composition API - useComputed": {
    "prefix": "vusecomputed",
    "body": [
      "const ${1:name} = computed(() => {",
      "\treturn ${2:value}",
      "})"
    ],
    "description": "const foo = computed(() => {})"
  },
  "Vue Composition API - useWatch": {
    "prefix": "vusewatch",
    "body": [
      "watch(() => ${1:source}, (newValue, oldValue) => {",
      "\t${2:callback}",
      "})"
    ],
    "description": "watch(() => ..., () => ...)"
  },
  "Vue Composition API - useOnMounted": {
    "prefix": "vuseonmounted",
    "body": [
      "onMounted(() => {",
      "\t${1:callback}",
      "})"
    ],
    "description": "Quickly insert onMounted(() => {})"
  },
  "Vue Composition API - $ref": {
    "prefix": "v3dref",
    "body": [
      "let ${1:name} = \\$ref(${2:initialValue})"
    ],
    "description": "Vue 3.5+ $ref syntax sugar (reactivity transform)"
  },
  "Vue Composition API - $computed": {
    "prefix": "v3dcomputed",
    "body": [
      "let ${1:name} = \\$computed(() => {",
      "\t${2:return value}",
      "})"
    ],
    "description": "Vue 3.5+ $computed syntax sugar (reactivity transform)"
  },
  "Vue Composition API - $shallowRef": {
    "prefix": "v3dshallowref",
    "body": [
      "let ${1:name} = \\$shallowRef(${2:initialValue})"
    ],
    "description": "Vue 3.5+ $shallowRef syntax sugar (reactivity transform)"
  },
  "Vue Composition API - $customRef": {
    "prefix": "v3dcustomref",
    "body": [
      "let ${1:name} = \\$customRef((track, trigger) => {",
      "\treturn {",
      "\t\tget() {",
      "\t\t\ttrack()",
      "\t\t\treturn ${2:value}",
      "\t\t},",
      "\t\tset(newValue) {",
      "\t\t\t${3:value = newValue}",
      "\t\t\ttrigger()",
      "\t\t}",
      "\t}",
      "})"
    ],
    "description": "Vue 3.5+ $customRef syntax sugar (reactivity transform)"
  },
  "Vue Composition API - $toRef": {
    "prefix": "v3dtoref",
    "body": [
      "let ${1:name} = \\$toRef(${2:reactiveObject}, '${3:key}')"
    ],
    "description": "Vue 3.5+ $toRef syntax sugar (reactivity transform)"
  },
  "Vue Composition API - useId": {
    "prefix": "v3useid",
    "body": [
      "const ${1:id} = useId()"
    ],
    "description": "Vue 3.5+ useId for SSR (Server-Side Rendering)"
  },
  "Vue Composition API - Lazy Hydration": {
    "prefix": "v3lazyhydration",
    "body": [
      "<${1:Component} v-hydrate-on-visible />"
    ],
    "description": "Vue 3.5+ Lazy Hydration for SSR performance"
  },
  "Vue Composition API - defineCustomElement": {
    "prefix": "v3definecustomelement",
    "body": [
      "const ${1:CustomElement} = defineCustomElement(${2:MyComponent}, {",
      "\tshadowRoot: ${3:false}, // 不使用 Shadow DOM",
      "\tconfigureApp(app) {",
      "\t\tapp.config.errorHandler = (err) => {",
      "\t\t\t${4:// 自定义错误处理}",
      "\t\t}",
      "\t}",
      "})"
    ],
    "description": "Vue 3.5+ defineCustomElement with enhanced options"
  },
  "Vue Composition API - Reactive Props Destructuring": {
    "prefix": "v3reactiveprops",
    "body": [
      "const { ${1:propName} } = defineProps(['${1:propName}'])",
      "// 在 Vue 3.5+ 中，解构后的 props 保持响应性，无需 .value"
    ],
    "description": "Vue 3.5+ Reactive Props Destructuring"
  },
  "Vue Composition API - useHost": {
    "prefix": "v3usehost",
    "body": [
      "const host = useHost()",
      "// 在 Custom Elements 中获取宿主元素"
    ],
    "description": "Vue 3.5+ useHost API for Custom Elements"
  },
  "Vue Composition API - useShadowRoot": {
    "prefix": "v3useshadowroot",
    "body": [
      "const shadowRoot = useShadowRoot()",
      "// 在 Custom Elements 中获取 Shadow Root"
    ],
    "description": "Vue 3.5+ useShadowRoot API for Custom Elements"
  },
  "Vue 3.5+ Performance - Static Hoisting": {
    "prefix": "v3static",
    "body": [
      "<!-- 静态内容会被提升，不会在每次渲染时重新创建 -->",
      "<div class=\"static-class\">",
      "\t<h1>静态标题</h1>",
      "\t<p>这段内容是静态的，Vue 3.5会将其提升以优化性能</p>",
      "</div>",
      "<!-- 动态内容 -->",
      "<div>{{ dynamicContent }}</div>"
    ],
    "description": "Vue 3.5+ Static Hoisting for Performance Optimization"
  },
  "Vue 3.5+ Performance - Patch Flags": {
    "prefix": "v3patchflag",
    "body": [
      "<!-- Vue 3.5 会为这些元素添加 Patch Flags 以优化更新 -->",
      "<!-- 仅文本内容变化 -->",
      "<div>{{ text }}</div>",
      "<!-- 仅 class 变化 -->",
      "<div :class=\"className\">静态内容</div>",
      "<!-- 多个属性变化 -->",
      "<div :class=\"className\" :style=\"style\">{{ text }}</div>"
    ],
    "description": "Vue 3.5+ Patch Flags for Render Optimization"
  },
  "Vue 3.5+ Performance - Shallow Ref": {
    "prefix": "v3shallowperf",
    "body": [
      "// 对于大型数据对象，使用 shallowRef 避免深层响应式转换",
      "const largeData = shallowRef({",
      "\t// 大量数据",
      "\titems: Array.from({ length: 10000 }, (_, i) => ({ id: i, name: `Item \\${i}` }))",
      "})",
      "",
      "// 只在需要时更新整个对象",
      "const updateData = () => {",
      "\tlargeData.value = {",
      "\t\titems: Array.from({ length: 10000 }, (_, i) => ({ id: i, name: `Updated Item \\${i}` }))",
      "\t}",
      "}"
    ],
    "description": "Vue 3.5+ Performance Optimization with shallowRef"
  },
  "Vue 3.5+ Performance - Object Freezing": {
    "prefix": "v3freezeprop",
    "body": [
      "// 对于不需要响应式的常量对象，使用 Object.freeze 避免响应式转换",
      "const constants = Object.freeze({",
      "\tMAX_ITEMS: 100,",
      "\tDEFAULT_THEME: 'light',",
      "\tAPI_ENDPOINT: 'https://api.example.com'",
      "})",
      "",
      "// 在组件中使用",
      "const config = reactive({",
      "\ttheme: constants.DEFAULT_THEME,",
      "\tmaxItems: constants.MAX_ITEMS",
      "})"
    ],
    "description": "Vue 3.5+ Performance Optimization with Object.freeze"
  },
  "Vue 3.5+ Performance - Async Component": {
    "prefix": "v3async",
    "body": [
      "// 异步组件 - 按需加载，减少初始包大小",
      "const ${1:AsyncComponent} = defineAsyncComponent({",
      "\t// 加载函数",
      "\tloader: () => import('./${1:AsyncComponent}.vue'),",
      "\t// 加载中组件",
      "\tloadingComponent: ${2:LoadingComponent},",
      "\t// 错误组件",
      "\terrorComponent: ${3:ErrorComponent},",
      "\t// 延迟显示加载组件的时间（毫秒）",
      "\tdelay: ${4:200},",
      "\t// 超时时间（毫秒）",
      "\ttimeout: ${5:3000},",
      "\t// Suspense 模式",
      "\tsuspensible: ${6:true},",
      "\t// 错误处理",
      "\tonError(error, retry, fail, attempts) {",
      "\t\tif (attempts <= 3) {",
      "\t\t\t// 重试之前延迟",
      "\t\t\tsetTimeout(retry, 1000)",
      "\t\t} else {",
      "\t\t\tfail()",
      "\t\t}",
      "\t}",
      "})"
    ],
    "description": "Vue 3.5+ Async Component for Performance Optimization"
  },
  "Vue 3.5+ Performance - Lazy Hydration Config": {
    "prefix": "v3lazyconfig",
    "body": [
      "// 在 vite.config.js 中配置 Lazy Hydration",
      "export default defineConfig({",
      "\tplugins: [",
      "\t\tvue({",
      "\t\t\ttemplate: {",
      "\t\t\t\tcompilerOptions: {",
      "\t\t\t\t\thydration: {",
      "\t\t\t\t\t\t// 启用 Lazy Hydration",
      "\t\t\t\t\t\tlazy: true,",
      "\t\t\t\t\t\t// 设置水合策略",
      "\t\t\t\t\t\tstrategy: '${1:visible}', // 'visible' | 'idle' | 'media' | 'event'",
      "\t\t\t\t\t\t// 设置延迟时间",
      "\t\t\t\t\t\tdelay: ${2:0},",
      "\t\t\t\t\t\t// 设置媒体查询条件",
      "\t\t\t\t\t\tmediaQuery: '${3:(max-width: 768px)}'",
      "\t\t\t\t\t}",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t})",
      "\t]",
      "})"
    ],
    "description": "Vue 3.5+ Lazy Hydration Configuration for SSR Performance"
  },
  "Vue 3.5+ Performance - Reactive Proxy": {
    "prefix": "v3proxyperf",
    "body": [
      "// Vue 3.5 基于 Proxy 的响应式系统优化",
      "// 相比 Vue 2 的 Object.defineProperty，Proxy 能更好地处理数组和动态属性",
      "const state = reactive({",
      "\titems: [], // 数组变化自动响应",
      "\tcount: 0",
      "})",
      "",
      "// 动态添加属性也具有响应性",
      "const addItem = () => {",
      "\tstate.items.push({",
      "\t\tid: state.items.length,",
      "\t\tname: `Item \\${state.items.length}`",
      "\t})",
      "\t// 动态添加的属性也具有响应性",
      "\tstate.newProperty = '动态属性'",
      "}"
    ],
    "description": "Vue 3.5+ Performance Optimization with Proxy-based Reactivity"
  },
  "Vue 3.5+ Performance - Computed Caching": {
    "prefix": "v3computedperf",
    "body": [
      "// 计算属性会基于响应式依赖进行缓存",
      "const expensiveCalculation = computed(() => {",
      "\tconsole.log('执行昂贵的计算')",
      "\treturn state.items.reduce((sum, item) => sum + item.id, 0)",
      "})",
      "",
      "// 多次访问计算属性，但依赖未变化时不会重新计算",
      "console.log(expensiveCalculation.value) // 执行计算",
      "console.log(expensiveCalculation.value) // 使用缓存",
      "console.log(expensiveCalculation.value) // 使用缓存",
      "",
      "// 只有当依赖变化时才会重新计算",
      "state.items.push({ id: 100, name: 'New Item' })",
      "console.log(expensiveCalculation.value) // 重新执行计算"
    ],
    "description": "Vue 3.5+ Performance Optimization with Computed Caching"
  },
  "Vue Router - useRouter": {
    "prefix": "vuserouter",
    "body": [
      "const router = useRouter()"
    ],
    "description": "Get router instance in setup"
  },
  "Vue Router - useRoute": {
    "prefix": "vuseroute",
    "body": [
      "const route = useRoute()"
    ],
    "description": "Get current route in setup"
  }

}